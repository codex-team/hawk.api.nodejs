"""
Payment link structure
"""
type PaymentLink {
  """
  Total payment amount in kopecs
  """
  Amount: Int

  """
  Payment status
  """
  Status: String

  """
  If the payment is successfull
  """
  Success: Boolean

  """
  URL to the payment page
  """
  PaymentURL: String
}

type CardInfo {
  """
  Card number (Pan)
  """
  pan: String

  """
  Card ID
  """
  cardId: String

  """
  Card expiration date
  """
  expDate: String
}


"""
Transaction object
"""
type Transaction {
  """
  Transaction type
  """
  type: String!

  """
  Workspace for which transaction has been made
  """
  workspace: Workspace!

  """
  Transaction amount
  """
  amount: Int!

  """
  Transaction date
  """
  date: DateTime!

  """
  User by whom transaction has been made
  """
  user: User

  """
  PAN of card by which transaction has been made
  """
  cardPan: Int
}

extend type Query {
  """
  Get attached cards
  """
  getCardList: [CardInfo!] @requireAuth

  """
  Initialize recurrent payment
  """
  payWithCard(
    """
    Total payment amount in kopecs
    """
    amount: Int!

    """
    Workspace id for which the payment will be made
    """
    workspaceId: String!

    """
    Unique card identifier for recurrent payment. Omit this to pay with unattached card
    """
    cardId: Int!

    """
    Payment form language
    """
    language: String
  ): Boolean! @requireAuth

  """
  Initialize single payment
  """
  payOnce(
    """
    Total payment amount in kopecs
    """
    amount: Int!

    """
    Workspace id for which the payment will be made
    """
    workspaceId: String!

    """
    Payment form language
    """
    language: String
  ): PaymentLink! @requireAuth

  """
  Returns JSON data with payment link and initiate card attach procedure
  """
  attachCard(language: String): PaymentLink @requireAuth

  """
  Get workspace transactions
  """
  transactions("Workspaces IDs" ids: [ID] = []): [Transaction] @requireAuth
}

extend type Mutation {
  """
  Remove card
  """
  removeCard(cardNumber: String!): Boolean! @requireAuth
}
